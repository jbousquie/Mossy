
-- SETTINGS
local WALK_VEL = 650
local JUMP_VEL = 900
local DASH_VEL = 1500
local GRAVITY = 1500
local MAX_Y_VEL = 2000
local AIR_FRICTION = 0.97

-- STATES 
local STATE_IDLE = hash("idle")
local STATE_WALK = hash("walk")
local STATE_JUMP = hash("jump")
local STATE_DASH = hash("dash")

-- INPUTS
local RIGHT = hash("right")
local LEFT = hash("left")
local JUMP = hash("jump")
local DASH = hash("dash")

-- ANIMATIONS
local ANIM_IDLE = hash("idle")
local ANIM_WALK = hash("walk")
local ANIM_JUMP = hash("jump")
local ANIM_DASH = hash("dash1")

-- OTHER CONSTs
local CONTACT_POINT = hash("contact_point_response")
local LEVEL_GROUP = hash("level")


function init(self)
	msg.post("#", "acquire_input_focus")
	-- activate camera attached to the player collection
	-- this will send camera updates to the render script
	msg.post("#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")

	self.velocity = vmath.vector3(0, 0, 0)
	self.direction = 1
	self.on_ground = false
	self.hit_wall = false
	self.hit_ceiling = false
	self.state = STATE_WALK
	self.previous_state = STATE_IDLE
	self.animation = ANIM_IDLE
	self.correction = vmath.vector3(0, 0, 0)
	self.compensation = vmath.vector3()
end


-- clamp val between min and max
local function clamp(val, min, max)
	if val < min then return min 
	elseif val > max then return max
	else return val
	end
end

-- add v2 in place to v1
local function add_in_place(v1 ,v2)
	v1.x = v1.x + v2.x
	v1.y = v1.y + v2.y
	v1.z = v1.z + v2.z
end

-- multiply vector v1 by scalar val
local function multiply_in_place(v1, val)
	v1.x = v1.x * val
	v1.y = v1.y * val
	v1.z = v1.z * val
end

-- copy v2 values into v1
local function copy_in_place(v1, v2)
	v1.x = v2.x
	v1.y = v2.y
	v1.z = v2.z
end


local function animate(self)
	local state = self.state
	if state ~= self.previous_state then
		if state == STATE_IDLE then
			self.animation = ANIM_IDLE
		elseif state == STATE_WALK and self.on_ground then
			self.animation = ANIM_WALK
		elseif state == STATE_DASH and self.on_ground then
			self.animation = ANIM_DASH
		elseif state == STATE_JUMP then
			self.animation = ANIM_JUMP
		end
		sprite.play_flipbook("#sprite", self.animation)
		self.previous_state = self.state
	end
end


function fixed_update(self, dt)

	-- check vertical collision
	if self.on_ground then
		self.velocity.y = 0
	else
		if self.hit_ceiling then self.velocity.y = 0 end
		-- apply gravity to velocity Y
		self.velocity.y = self.velocity.y - GRAVITY * dt
		self.velocity.y = clamp(self.velocity.y, -MAX_Y_VEL, MAX_Y_VEL)
		self.state = STATE_JUMP
	end

	-- set the character according to its velocity and collision correction
	local pos = go.get_position()
	add_in_place(pos, self.velocity * dt + self.correction)
	go.set_position(pos)

	-- update velocity X in case he's still jumping
	if self.hit_wall or (self.state ~= STATE_DASH and self.on_ground) then
		self.velocity.x = 0
	else
		self.velocity.x = self.velocity.x * AIR_FRICTION
	end

	-- animate the sprite
	animate(self)

	-- reset booleans and correction
	self.on_ground = false
	self.hit_wall = false
	self.hit_ceiling = false
	self.correction.x = 0
	self.correction.y = 0
	self.correction.z = 0
end

-- test collision and update state booleans.
-- no coordinate updates are computed here
local function manage_collisions(self, message)
	local normal = message.normal
	local distance = message.distance

	if distance > 0 then
		local projection = vmath.project(self.correction, normal * distance)
		if projection < 1 then
			local comp = (distance - distance * projection)
			copy_in_place(self.compensation, normal)
			multiply_in_place(self.compensation, comp)
			add_in_place(self.correction, self.compensation)
		end
	end

	-- hit level on left or right 
	if math.abs(normal.x) > 0.7 then
		self.hit_wall = true
		self.state = STATE_IDLE
	end

	-- hit the ground
	if normal.y > 0.7 then
		self.on_ground = true
		self.state = STATE_IDLE
	end

	-- hit a ceiling
	if normal.y < -0.7 then
		self.hit_ceiling = true
	end
end


function on_message(self, message_id, message, sender)
	if message_id == CONTACT_POINT and message.group == LEVEL_GROUP then
		manage_collisions(self, message)
	end
end

local function flip(self)
	sprite.set_hflip("#sprite", self.direction < 0)
end

-- move horizontally
local function move_h(self, state)
	flip(self)
	local vel = state == STATE_DASH and DASH_VEL or WALK_VEL
	self.velocity.x = vel * self.direction
	if self.on_ground then self.state = state end
end

-- init jump
local function jump(self)
	self.on_ground = false
	self.velocity.y = JUMP_VEL
	self.state = STATE_JUMP
end

function on_input(self, action_id, action)
	if action_id == RIGHT then
		self.direction = 1
		move_h(self, STATE_WALK)
	elseif action_id == LEFT then
		self.direction = -1
		move_h(self, STATE_WALK)
	elseif action_id == JUMP and self.on_ground then
		jump(self)
	elseif action_id == DASH and self.on_ground then
		move_h(self, STATE_DASH)
	end
end

