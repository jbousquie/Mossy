-- SETTINGS
local SLIME_VEL = 130
local GRAVITY = 850
local MAX_Y_VEL = 1500
local AIR_FRICTION = 0.97
local SLIME_SCALE = 0.8

-- OTHER CONSTs
local CONTACT_POINT = hash("contact_point_response")
local LEVEL_GROUP = hash("level")


function init(self)
	self.slime_vel = SLIME_VEL * (0.8 + math.random() * 0.2)
	self.velocity = vmath.vector3(0, 0, 0)
	self.direction = math.random() < 0.5 and 1 or -1
	self.on_ground = false
	self.hit_wall = false
	self.correction = vmath.vector3()
	local scale = go.get_scale()
	scale.x = (0.65 + math.random() * 0.35) * SLIME_SCALE
	scale.y = (0.60 + math.random() * 0.45) * SLIME_SCALE
	go.set_scale(scale)
end


-- clamp val between min and max
local function clamp(val, min, max)
	if val < min then return min 
	elseif val > max then return max
	else return val
	end
end

function fixed_update(self, dt)

	if self.hit_wall then
		self.direction = -self.direction
	end
	if self.on_ground then
		self.velocity.y = 0
	else 
		self.velocity.x = self.velocity.x * AIR_FRICTION
		-- apply gravity to velocity Y
		self.velocity.y = self.velocity.y - GRAVITY * dt
		self.velocity.y = clamp(self.velocity.y, -MAX_Y_VEL, MAX_Y_VEL)
	end
	self.velocity.x = self.slime_vel * self.direction

	local pos = go.get_position()
	pos = pos + self.velocity * dt + self.correction
	go.set_position(pos)

	self.on_ground = false
	self.hit_wall = false
	self.correction.x = 0
	self.correction.y = 0
end

function manage_collisions(self, message)
	local normal = message.normal
	local distance = message.distance
	
	-- hit level on left or right 
	if math.abs(normal.x) > 0.7 then
		self.hit_wall = true
		self.correction.x = normal.x * distance
	end

	-- hit the ground
	if normal.y > 0.7 then
		self.on_ground = true
		self.correction.y = normal.y * distance
	end
end

function on_message(self, message_id, message, sender)
	if message_id == CONTACT_POINT and message.group == LEVEL_GROUP then
		manage_collisions(self, message)
	end
end



